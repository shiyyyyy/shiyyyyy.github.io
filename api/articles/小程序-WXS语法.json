{"title":"小程序 WXS语法","slug":"小程序-WXS语法","date":"2018-03-03T09:20:49.000Z","updated":"2018-03-03T12:18:06.429Z","comments":true,"path":"api/articles/小程序-WXS语法.json","photos":[],"link":"","excerpt":" [Figure] 这个是遍历不出来的，在模拟器里面什么都不会显示，因为 Mustache 语法不支持函数调用.是不是很残酷（´༎ຶД༎ຶ`）","covers":["https://github.com/shiyyyyy/images/raw/master/%E5%B0%8F%E7%A8%8B%E5%BA%8FWXS.jpg"],"content":"<p><img src=\"https://github.com/shiyyyyy/images/raw/master/%E5%B0%8F%E7%A8%8B%E5%BA%8FWXS.jpg\" alt=\"img\"><br>因为最近一直在做小程序的项目，遇见了很多坑，其中就有在 WXML 中使用 Mustache 语法（双花括号）的问题，在 WXML 中的 双花括号语法里面是不能执行任何方法的，只可以做一些简单的四则运算和 Boolen 判断。也就是说是不可以用函数的！这对于一个使用 Vue 框架的人来说，是很残酷的。</p>\n<p><strong>例子：</strong></p>\n<p>页面渲染：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--wxml--&gt; </span><br><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;[&apos;1&apos;， &apos;2&apos;， &apos;3&apos;]&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; Number(item) &#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>页面输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br></pre></td></tr></table></figure></p>\n<p>这个是遍历不出来的，在模拟器里面什么都不会显示，因为 Mustache 语法不支持函数调用.是不是很残酷（´༎ຶД༎ຶ`）</p>\n<a id=\"more\"></a>\n<p>别担心，这个时候 <strong>WXS</strong> 就出来救场了</p>\n<p>还是上面的<strong>例子</strong>：</p>\n<p>页面渲染：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--wxml--&gt;</span><br><span class=\"line\">&lt;wxs <span class=\"built_in\">module</span>=<span class=\"string\">\"test\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(str)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports.num = num</span><br><span class=\"line\">&lt;<span class=\"regexp\">/wxs&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:for=\"&#123;&#123;['1', '2', '3']&#125;&#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;&#123; test.num(item) &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure></p>\n<p>页面输出：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>这个时候控制器就会遍历出123来，是不是很惊喜（｡◕ˇ∀ˇ◕），下面来系统地介绍一下 WXS</p>\n<h3 id=\"什么是-WXS\"><a href=\"#什么是-WXS\" class=\"headerlink\" title=\"什么是 WXS\"></a>什么是 WXS</h3><p>WXS 即 WeiXin Script 是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构。引入 WXS 后，小程序开发者可以将数据处理代码进行拆分，打造逻辑更灵活的小程序。</p>\n<h3 id=\"WXS-的语法是什么样的\"><a href=\"#WXS-的语法是什么样的\" class=\"headerlink\" title=\"WXS 的语法是什么样的\"></a>WXS 的语法是什么样的</h3><p>WXS语法和JS是基本相当的，JS中的语法，在WXS里基本都可以使用。<br>所以，虽然二者在本质上是两种语言，但是某种程度上，我们也可以将 WXS 视作插入在 WXML 中的 JS 代码。</p>\n<p>但是需要注意的是：虽然 WXS 是 WXS 是无法使用小程序的API接口的y以及全局函数的！！！WXS 只能读取 Page 中的 data，并处理和使用。</p>\n<p>同时，只有在 WXML 中使用 Mustache 语法，引用 WXS 模块中的内容，WXS 中的代码才会加载、执行。</p>\n<p>现在微信开发者工具都自动集成了 WXS，只要是新版的开发者工具，都可以使用 WXS 。</p>\n<h3 id=\"怎样使用-WXS\"><a href=\"#怎样使用-WXS\" class=\"headerlink\" title=\"怎样使用 WXS\"></a>怎样使用 WXS</h3><p>WXS 代码可以编写在 wxml 文件中的 <wxs> 标签内，或以 .wxs 为后缀名的文件内。</wxs></p>\n<p>所以有两种使用 WXS 的方式：</p>\n<h4 id=\"一、直接插入-WXML-代码\"><a href=\"#一、直接插入-WXML-代码\" class=\"headerlink\" title=\"一、直接插入 WXML 代码\"></a>一、直接插入 WXML 代码</h4><p>直接在标签里，插入 WXS 代码。<br>还是上面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- wxml --&gt;</span><br><span class=\"line\">&lt;wxs <span class=\"built_in\">module</span>=<span class=\"string\">\"test\"</span>&gt; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports.num = num</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports.a = a</span><br><span class=\"line\">&lt;<span class=\"regexp\">/wxs&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;view wx:for=\"&#123;&#123;['1'， '2'， '3']&#125;&#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;&#123; test.num(test.a) &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二、引用-WXS-文件\"><a href=\"#二、引用-WXS-文件\" class=\"headerlink\" title=\"二、引用 WXS 文件\"></a>二、引用 WXS 文件</h4><p>新建并编写 WXS 文件后，在 WXML 的 WXS 标签中，利用src属性，引用相对位置的 WXS 文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--wxml--&gt;</span><br><span class=\"line\">&lt;wxs <span class=\"built_in\">module</span>=<span class=\"string\">\"test\"</span> src=<span class=\"string\">\"./test.wxs\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>每一个 WXS 模块，都需要用module标签进行命名。命名模块后，开发者工具才能正常进行编译、在 WXML 中引用模块中的变量与函数。</p>\n<p>另外，小程序的条件渲染和循环渲染对 WXS 是无效的</p>\n<p>也就是说，即使将 WXS 代码包裹在未渲染的代码中，只要渲染的 WXML 部分调用了此模块，这段 WXS 代码依然会被加载。</p>\n<p><strong>需要注意的是：如果想在 WXS 模块中引用其它 WXS 文件可以使用 require 函数，必须使用相对路径。</strong></p>\n","categories":[],"tags":[]}